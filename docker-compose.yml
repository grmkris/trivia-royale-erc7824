services:
  database:
    image: postgres:17.2
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      retries: 5
      start_period: 10s

  db-init:
    image: postgres:17.2
    environment:
      PGUSER: ${POSTGRES_USER:-postgres}
      PGPASSWORD: ${POSTGRES_PASSWORD:-postgres}
      PGDATABASE: ${POSTGRES_DB:-postgres}
      PGHOST: database
      PGPORT: 5432
      # USDC on Sepolia
      TOKEN_ADDRESS: ${TOKEN_ADDRESS:-0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238}
      CHAIN_ID: ${CHAIN_ID:-11155111}
    volumes:
      - ../nitrolite/clearnode/config/migrations/postgres:/migrations
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        until pg_isready -h database -p 5432 -U ${POSTGRES_USER:-postgres}; do
          echo 'Waiting for database connection...'
          sleep 2
        done &&

        # Create migrations table if it doesn't exist
        echo 'Creating migrations table if not exists...' &&
        psql -h database -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres} -c \"
          CREATE TABLE IF NOT EXISTS goose_db_version (
            id serial PRIMARY KEY,
            version_id int8 NOT NULL,
            is_applied boolean NOT NULL DEFAULT true,
            tstamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
          );
        \" &&

        echo 'Running pending migrations...' &&
        for migration in /migrations/*.sql; do
          filename=\$$(basename \$$migration) &&
          version=\$$(echo \$$filename | grep -o '^[0-9]\\+') &&

          if ! psql -h database -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres} -tAc \"SELECT 1 FROM goose_db_version WHERE version_id = \$$version\" | grep -q 1; then
            echo \"Applying migration: \$$filename\" &&
            # Extract and execute only the Up migration
            sed -n '/^-- +goose Up/,/^-- +goose Down/p' \$$migration |
            grep -v '^-- +goose' |
            psql -h database -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres} &&
            psql -h database -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres} -c \"INSERT INTO goose_db_version (version_id) VALUES (\$$version);\" &&
            echo \"Successfully applied: \$$filename\"
          else
            echo \"Skipping already applied migration: \$$filename\"
          fi
        done &&

        echo 'Checking database...' &&
        # Check if token already exists
        TOKEN_EXISTS=$$(psql -h database -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres} -t -c \"SELECT COUNT(*) FROM assets WHERE token = '$$TOKEN_ADDRESS' AND chain_id = $$CHAIN_ID;\" | xargs) &&

        if [ \"$$TOKEN_EXISTS\" -eq \"0\" ]; then
          echo 'Seeding database with USDC token...' &&
          psql -h database -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres} -c \"
            INSERT INTO assets (token, chain_id, symbol, decimals)
            VALUES ('$$TOKEN_ADDRESS', $$CHAIN_ID, 'USDC', 6);
          \" &&
          echo 'Database seeded with USDC token successfully'
        else
          echo 'Database already seeded, skipping'
        fi
      "
    depends_on:
      database:
        condition: service_healthy

  clearnode:
    image: kristjangrm/clearnode:latest
    ports:
      - "8000:8000"
      - "4242:4242"
    depends_on:
      database:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    environment:
      # Broker signing key (Broker wallet - index 1 from mnemonic)
      # IMPORTANT: This must be derived from mnemonic index 1, NOT index 0
      # The Funding wallet (index 0) is separate and only used for distribution
      BROKER_PRIVATE_KEY: ${BROKER_PRIVATE_KEY:-0x718758aaed9cd315e6140859867422e8df4ea4143d989769edb4be2eee23aea0}

      # Ethereum Sepolia Network Configuration (Chain ID: 11155111)
      ETHEREUM_SEPOLIA_CUSTODY_CONTRACT_ADDRESS: ${ETHEREUM_SEPOLIA_CUSTODY_CONTRACT_ADDRESS:-0x019B65A265EB3363822f2752141b3dF16131b262}
      ETHEREUM_SEPOLIA_ADJUDICATOR_ADDRESS: ${ETHEREUM_SEPOLIA_ADJUDICATOR_ADDRESS:-0x7c7ccbc98469190849BCC6c926307794fDfB11F2}
      ETHEREUM_SEPOLIA_BALANCE_CHECKER_ADDRESS: ${ETHEREUM_SEPOLIA_BALANCE_CHECKER_ADDRESS:-0x730dB3A1D3Ca47e7BaEb260c24C74ED4378726Bc}
      ETHEREUM_SEPOLIA_BLOCKCHAIN_RPC: ${ETHEREUM_SEPOLIA_BLOCKCHAIN_RPC:-wss://sepolia.infura.io/ws/v3/7d77649dbd2e49b3b418755505b46874}

      # Database Configuration
      CLEARNODE_DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@database:5432/${POSTGRES_DB:-postgres}?sslmode=disable
      CLEARNODE_LOG_LEVEL: ${CLEARNODE_LOG_LEVEL:-info}
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
